name: Build and Deploy React website to AWS S3 and CloudFront

on:
  push:
    branches:
      - main
    paths:
      - 'aurelius-webpage/**'
      - '.github/workflows/website-deploy.yml'

jobs:     
  build_website:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4


      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: aurelius-webpage/package-lock.json

      - name: Install deps and build website
        working-directory: aurelius-webpage
        run: |
          npm ci
          npm run build
      
      - name: Archive web production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: aurelius-webpage/dist
          if-no-files-found: error

  deploy_website:
    runs-on: ubuntu-latest
    needs: build_website
    steps:
      - name: Download web production artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-3 

      - name: Upload website files to S3 with cache headers
        run: |
          # Cache-bust strategy:
          # - HTML: no-cache so clients revalidate and pick up new asset URLs
          # - Static assets (hashed by Vite): long-lived, immutable cache
          aws s3 sync dist/ s3://${{ secrets.S3_BUCKET_NAME }} \
            --delete \
            --cache-control "no-cache, no-store, must-revalidate" \
            --exclude "*" --include "*.html"

          aws s3 sync dist/ s3://${{ secrets.S3_BUCKET_NAME }} \
            --delete \
            --cache-control "public, max-age=31536000, immutable" \
            --exclude "*.html"

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/index.html" "/"